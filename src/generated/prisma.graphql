# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type CountryCode implements Node {
  id: ID!
  name: String
  countryCode: String!
  dialingCode: String!
  active: Boolean
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Identifier implements Node {
  id: ID!
  hash: String!
  phoneNumber(where: PhoneNumberWhereInput): PhoneNumber
  user(where: UserWhereInput): User
  verificationCodes(where: VerificationCodeWhereInput, orderBy: VerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VerificationCode!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhoneNumber implements Node {
  countryCode(where: CountryCodeWhereInput): CountryCode!
  createdAt: DateTime!
  id: ID!
  identifier(where: IdentifierWhereInput): Identifier
  phoneNumber: String!
  updatedAt: DateTime!
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  identifier(where: IdentifierWhereInput): Identifier
  updatedAt: DateTime!
  uuid: String
  isVerified: Boolean
}

type VerificationCode implements Node {
  code: String!
  createdAt: DateTime!
  id: ID!
  identifier(where: IdentifierWhereInput): Identifier
  updatedAt: DateTime!
  validUntil: DateTime!
}


#
# Other Types
#

type AggregateCountryCode {
  count: Int!
}

type AggregateIdentifier {
  count: Int!
}

type AggregatePhoneNumber {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVerificationCode {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CountryCodeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CountryCodeEdge]!
  aggregate: AggregateCountryCode!
}

input CountryCodeCreateInput {
  name: String
  countryCode: String!
  dialingCode: String!
  active: Boolean
  phoneNumbers: PhoneNumberCreateManyWithoutCountryCodeInput
}

input CountryCodeCreateOneWithoutPhoneNumbersInput {
  create: CountryCodeCreateWithoutPhoneNumbersInput
  connect: CountryCodeWhereUniqueInput
}

input CountryCodeCreateWithoutPhoneNumbersInput {
  name: String
  countryCode: String!
  dialingCode: String!
  active: Boolean
}

"""
An edge in a connection.
"""
type CountryCodeEdge {
  """
  The item at the end of the edge.
  """
  node: CountryCode!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CountryCodeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  countryCode_ASC
  countryCode_DESC
  dialingCode_ASC
  dialingCode_DESC
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryCodePreviousValues {
  id: ID!
  name: String
  countryCode: String!
  dialingCode: String!
  active: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CountryCodeSubscriptionPayload {
  mutation: MutationType!
  node: CountryCode
  updatedFields: [String!]
  previousValues: CountryCodePreviousValues
}

input CountryCodeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountryCodeSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountryCodeSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryCodeWhereInput
}

input CountryCodeUpdateInput {
  name: String
  countryCode: String
  dialingCode: String
  active: Boolean
  phoneNumbers: PhoneNumberUpdateManyWithoutCountryCodeInput
}

input CountryCodeUpdateOneWithoutPhoneNumbersInput {
  create: CountryCodeCreateWithoutPhoneNumbersInput
  connect: CountryCodeWhereUniqueInput
  delete: Boolean
  update: CountryCodeUpdateWithoutPhoneNumbersDataInput
  upsert: CountryCodeUpsertWithoutPhoneNumbersInput
}

input CountryCodeUpdateWithoutPhoneNumbersDataInput {
  name: String
  countryCode: String
  dialingCode: String
  active: Boolean
}

input CountryCodeUpsertWithoutPhoneNumbersInput {
  update: CountryCodeUpdateWithoutPhoneNumbersDataInput!
  create: CountryCodeCreateWithoutPhoneNumbersInput!
}

input CountryCodeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountryCodeWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CountryCodeWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  countryCode: String
  """
  All values that are not equal to given value.
  """
  countryCode_not: String
  """
  All values that are contained in given list.
  """
  countryCode_in: [String!]
  """
  All values that are not contained in given list.
  """
  countryCode_not_in: [String!]
  """
  All values less than the given value.
  """
  countryCode_lt: String
  """
  All values less than or equal the given value.
  """
  countryCode_lte: String
  """
  All values greater than the given value.
  """
  countryCode_gt: String
  """
  All values greater than or equal the given value.
  """
  countryCode_gte: String
  """
  All values containing the given string.
  """
  countryCode_contains: String
  """
  All values not containing the given string.
  """
  countryCode_not_contains: String
  """
  All values starting with the given string.
  """
  countryCode_starts_with: String
  """
  All values not starting with the given string.
  """
  countryCode_not_starts_with: String
  """
  All values ending with the given string.
  """
  countryCode_ends_with: String
  """
  All values not ending with the given string.
  """
  countryCode_not_ends_with: String
  dialingCode: String
  """
  All values that are not equal to given value.
  """
  dialingCode_not: String
  """
  All values that are contained in given list.
  """
  dialingCode_in: [String!]
  """
  All values that are not contained in given list.
  """
  dialingCode_not_in: [String!]
  """
  All values less than the given value.
  """
  dialingCode_lt: String
  """
  All values less than or equal the given value.
  """
  dialingCode_lte: String
  """
  All values greater than the given value.
  """
  dialingCode_gt: String
  """
  All values greater than or equal the given value.
  """
  dialingCode_gte: String
  """
  All values containing the given string.
  """
  dialingCode_contains: String
  """
  All values not containing the given string.
  """
  dialingCode_not_contains: String
  """
  All values starting with the given string.
  """
  dialingCode_starts_with: String
  """
  All values not starting with the given string.
  """
  dialingCode_not_starts_with: String
  """
  All values ending with the given string.
  """
  dialingCode_ends_with: String
  """
  All values not ending with the given string.
  """
  dialingCode_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  phoneNumbers_every: PhoneNumberWhereInput
  phoneNumbers_some: PhoneNumberWhereInput
  phoneNumbers_none: PhoneNumberWhereInput
}

input CountryCodeWhereUniqueInput {
  id: ID
  dialingCode: String
}

scalar DateTime

"""
A connection to a list of items.
"""
type IdentifierConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [IdentifierEdge]!
  aggregate: AggregateIdentifier!
}

input IdentifierCreateInput {
  hash: String!
  phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
  user: UserCreateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateOneWithoutPhoneNumberInput {
  create: IdentifierCreateWithoutPhoneNumberInput
  connect: IdentifierWhereUniqueInput
}

input IdentifierCreateOneWithoutUserInput {
  create: IdentifierCreateWithoutUserInput
  connect: IdentifierWhereUniqueInput
}

input IdentifierCreateOneWithoutVerificationCodesInput {
  create: IdentifierCreateWithoutVerificationCodesInput
  connect: IdentifierWhereUniqueInput
}

input IdentifierCreateWithoutPhoneNumberInput {
  hash: String!
  user: UserCreateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateWithoutUserInput {
  hash: String!
  phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateWithoutVerificationCodesInput {
  hash: String!
  phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
  user: UserCreateOneWithoutIdentifierInput
}

"""
An edge in a connection.
"""
type IdentifierEdge {
  """
  The item at the end of the edge.
  """
  node: Identifier!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum IdentifierOrderByInput {
  id_ASC
  id_DESC
  hash_ASC
  hash_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IdentifierPreviousValues {
  id: ID!
  hash: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IdentifierSubscriptionPayload {
  mutation: MutationType!
  node: Identifier
  updatedFields: [String!]
  previousValues: IdentifierPreviousValues
}

input IdentifierSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [IdentifierSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [IdentifierSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IdentifierWhereInput
}

input IdentifierUpdateInput {
  hash: String
  phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
  user: UserUpdateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateOneWithoutPhoneNumberInput {
  create: IdentifierCreateWithoutPhoneNumberInput
  connect: IdentifierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: IdentifierUpdateWithoutPhoneNumberDataInput
  upsert: IdentifierUpsertWithoutPhoneNumberInput
}

input IdentifierUpdateOneWithoutUserInput {
  create: IdentifierCreateWithoutUserInput
  connect: IdentifierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: IdentifierUpdateWithoutUserDataInput
  upsert: IdentifierUpsertWithoutUserInput
}

input IdentifierUpdateOneWithoutVerificationCodesInput {
  create: IdentifierCreateWithoutVerificationCodesInput
  connect: IdentifierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: IdentifierUpdateWithoutVerificationCodesDataInput
  upsert: IdentifierUpsertWithoutVerificationCodesInput
}

input IdentifierUpdateWithoutPhoneNumberDataInput {
  hash: String
  user: UserUpdateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateWithoutUserDataInput {
  hash: String
  phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
  verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateWithoutVerificationCodesDataInput {
  hash: String
  phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
  user: UserUpdateOneWithoutIdentifierInput
}

input IdentifierUpsertWithoutPhoneNumberInput {
  update: IdentifierUpdateWithoutPhoneNumberDataInput!
  create: IdentifierCreateWithoutPhoneNumberInput!
}

input IdentifierUpsertWithoutUserInput {
  update: IdentifierUpdateWithoutUserDataInput!
  create: IdentifierCreateWithoutUserInput!
}

input IdentifierUpsertWithoutVerificationCodesInput {
  update: IdentifierUpdateWithoutVerificationCodesDataInput!
  create: IdentifierCreateWithoutVerificationCodesInput!
}

input IdentifierWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [IdentifierWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [IdentifierWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  hash: String
  """
  All values that are not equal to given value.
  """
  hash_not: String
  """
  All values that are contained in given list.
  """
  hash_in: [String!]
  """
  All values that are not contained in given list.
  """
  hash_not_in: [String!]
  """
  All values less than the given value.
  """
  hash_lt: String
  """
  All values less than or equal the given value.
  """
  hash_lte: String
  """
  All values greater than the given value.
  """
  hash_gt: String
  """
  All values greater than or equal the given value.
  """
  hash_gte: String
  """
  All values containing the given string.
  """
  hash_contains: String
  """
  All values not containing the given string.
  """
  hash_not_contains: String
  """
  All values starting with the given string.
  """
  hash_starts_with: String
  """
  All values not starting with the given string.
  """
  hash_not_starts_with: String
  """
  All values ending with the given string.
  """
  hash_ends_with: String
  """
  All values not ending with the given string.
  """
  hash_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  phoneNumber: PhoneNumberWhereInput
  user: UserWhereInput
  verificationCodes_every: VerificationCodeWhereInput
  verificationCodes_some: VerificationCodeWhereInput
  verificationCodes_none: VerificationCodeWhereInput
}

input IdentifierWhereUniqueInput {
  id: ID
  hash: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCountryCode(data: CountryCodeCreateInput!): CountryCode!
  createIdentifier(data: IdentifierCreateInput!): Identifier!
  createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber!
  createUser(data: UserCreateInput!): User!
  createVerificationCode(data: VerificationCodeCreateInput!): VerificationCode!
  updateCountryCode(data: CountryCodeUpdateInput!, where: CountryCodeWhereUniqueInput!): CountryCode
  updateIdentifier(data: IdentifierUpdateInput!, where: IdentifierWhereUniqueInput!): Identifier
  updatePhoneNumber(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereUniqueInput!): PhoneNumber
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVerificationCode(data: VerificationCodeUpdateInput!, where: VerificationCodeWhereUniqueInput!): VerificationCode
  deleteCountryCode(where: CountryCodeWhereUniqueInput!): CountryCode
  deleteIdentifier(where: IdentifierWhereUniqueInput!): Identifier
  deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVerificationCode(where: VerificationCodeWhereUniqueInput!): VerificationCode
  upsertCountryCode(where: CountryCodeWhereUniqueInput!, create: CountryCodeCreateInput!, update: CountryCodeUpdateInput!): CountryCode!
  upsertIdentifier(where: IdentifierWhereUniqueInput!, create: IdentifierCreateInput!, update: IdentifierUpdateInput!): Identifier!
  upsertPhoneNumber(where: PhoneNumberWhereUniqueInput!, create: PhoneNumberCreateInput!, update: PhoneNumberUpdateInput!): PhoneNumber!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertVerificationCode(where: VerificationCodeWhereUniqueInput!, create: VerificationCodeCreateInput!, update: VerificationCodeUpdateInput!): VerificationCode!
  updateManyCountryCodes(data: CountryCodeUpdateInput!, where: CountryCodeWhereInput!): BatchPayload!
  updateManyIdentifiers(data: IdentifierUpdateInput!, where: IdentifierWhereInput!): BatchPayload!
  updateManyPhoneNumbers(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyVerificationCodes(data: VerificationCodeUpdateInput!, where: VerificationCodeWhereInput!): BatchPayload!
  deleteManyCountryCodes(where: CountryCodeWhereInput!): BatchPayload!
  deleteManyIdentifiers(where: IdentifierWhereInput!): BatchPayload!
  deleteManyPhoneNumbers(where: PhoneNumberWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyVerificationCodes(where: VerificationCodeWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PhoneNumberConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PhoneNumberEdge]!
  aggregate: AggregatePhoneNumber!
}

input PhoneNumberCreateInput {
  phoneNumber: String!
  countryCode: CountryCodeCreateOneWithoutPhoneNumbersInput!
  identifier: IdentifierCreateOneWithoutPhoneNumberInput
}

input PhoneNumberCreateManyWithoutCountryCodeInput {
  create: [PhoneNumberCreateWithoutCountryCodeInput!]
  connect: [PhoneNumberWhereUniqueInput!]
}

input PhoneNumberCreateOneWithoutIdentifierInput {
  create: PhoneNumberCreateWithoutIdentifierInput
  connect: PhoneNumberWhereUniqueInput
}

input PhoneNumberCreateWithoutCountryCodeInput {
  phoneNumber: String!
  identifier: IdentifierCreateOneWithoutPhoneNumberInput
}

input PhoneNumberCreateWithoutIdentifierInput {
  phoneNumber: String!
  countryCode: CountryCodeCreateOneWithoutPhoneNumbersInput!
}

"""
An edge in a connection.
"""
type PhoneNumberEdge {
  """
  The item at the end of the edge.
  """
  node: PhoneNumber!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PhoneNumberOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhoneNumberPreviousValues {
  createdAt: DateTime!
  id: ID!
  phoneNumber: String!
  updatedAt: DateTime!
}

type PhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: PhoneNumber
  updatedFields: [String!]
  previousValues: PhoneNumberPreviousValues
}

input PhoneNumberSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhoneNumberSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PhoneNumberSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhoneNumberWhereInput
}

input PhoneNumberUpdateInput {
  phoneNumber: String
  countryCode: CountryCodeUpdateOneWithoutPhoneNumbersInput
  identifier: IdentifierUpdateOneWithoutPhoneNumberInput
}

input PhoneNumberUpdateManyWithoutCountryCodeInput {
  create: [PhoneNumberCreateWithoutCountryCodeInput!]
  connect: [PhoneNumberWhereUniqueInput!]
  disconnect: [PhoneNumberWhereUniqueInput!]
  delete: [PhoneNumberWhereUniqueInput!]
  update: [PhoneNumberUpdateWithWhereUniqueWithoutCountryCodeInput!]
  upsert: [PhoneNumberUpsertWithWhereUniqueWithoutCountryCodeInput!]
}

input PhoneNumberUpdateOneWithoutIdentifierInput {
  create: PhoneNumberCreateWithoutIdentifierInput
  connect: PhoneNumberWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PhoneNumberUpdateWithoutIdentifierDataInput
  upsert: PhoneNumberUpsertWithoutIdentifierInput
}

input PhoneNumberUpdateWithoutCountryCodeDataInput {
  phoneNumber: String
  identifier: IdentifierUpdateOneWithoutPhoneNumberInput
}

input PhoneNumberUpdateWithoutIdentifierDataInput {
  phoneNumber: String
  countryCode: CountryCodeUpdateOneWithoutPhoneNumbersInput
}

input PhoneNumberUpdateWithWhereUniqueWithoutCountryCodeInput {
  where: PhoneNumberWhereUniqueInput!
  data: PhoneNumberUpdateWithoutCountryCodeDataInput!
}

input PhoneNumberUpsertWithoutIdentifierInput {
  update: PhoneNumberUpdateWithoutIdentifierDataInput!
  create: PhoneNumberCreateWithoutIdentifierInput!
}

input PhoneNumberUpsertWithWhereUniqueWithoutCountryCodeInput {
  where: PhoneNumberWhereUniqueInput!
  update: PhoneNumberUpdateWithoutCountryCodeDataInput!
  create: PhoneNumberCreateWithoutCountryCodeInput!
}

input PhoneNumberWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhoneNumberWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PhoneNumberWhereInput!]
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  phoneNumber: String
  """
  All values that are not equal to given value.
  """
  phoneNumber_not: String
  """
  All values that are contained in given list.
  """
  phoneNumber_in: [String!]
  """
  All values that are not contained in given list.
  """
  phoneNumber_not_in: [String!]
  """
  All values less than the given value.
  """
  phoneNumber_lt: String
  """
  All values less than or equal the given value.
  """
  phoneNumber_lte: String
  """
  All values greater than the given value.
  """
  phoneNumber_gt: String
  """
  All values greater than or equal the given value.
  """
  phoneNumber_gte: String
  """
  All values containing the given string.
  """
  phoneNumber_contains: String
  """
  All values not containing the given string.
  """
  phoneNumber_not_contains: String
  """
  All values starting with the given string.
  """
  phoneNumber_starts_with: String
  """
  All values not starting with the given string.
  """
  phoneNumber_not_starts_with: String
  """
  All values ending with the given string.
  """
  phoneNumber_ends_with: String
  """
  All values not ending with the given string.
  """
  phoneNumber_not_ends_with: String
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  countryCode: CountryCodeWhereInput
  identifier: IdentifierWhereInput
}

input PhoneNumberWhereUniqueInput {
  id: ID
  phoneNumber: String
}

type Query {
  countryCodes(where: CountryCodeWhereInput, orderBy: CountryCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CountryCode]!
  identifiers(where: IdentifierWhereInput, orderBy: IdentifierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Identifier]!
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  verificationCodes(where: VerificationCodeWhereInput, orderBy: VerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VerificationCode]!
  countryCode(where: CountryCodeWhereUniqueInput!): CountryCode
  identifier(where: IdentifierWhereUniqueInput!): Identifier
  phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  user(where: UserWhereUniqueInput!): User
  verificationCode(where: VerificationCodeWhereUniqueInput!): VerificationCode
  countryCodesConnection(where: CountryCodeWhereInput, orderBy: CountryCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryCodeConnection!
  identifiersConnection(where: IdentifierWhereInput, orderBy: IdentifierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IdentifierConnection!
  phoneNumbersConnection(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhoneNumberConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  verificationCodesConnection(where: VerificationCodeWhereInput, orderBy: VerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VerificationCodeConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  countryCode(where: CountryCodeSubscriptionWhereInput): CountryCodeSubscriptionPayload
  identifier(where: IdentifierSubscriptionWhereInput): IdentifierSubscriptionPayload
  phoneNumber(where: PhoneNumberSubscriptionWhereInput): PhoneNumberSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  verificationCode(where: VerificationCodeSubscriptionWhereInput): VerificationCodeSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  uuid: String
  isVerified: Boolean
  identifier: IdentifierCreateOneWithoutUserInput
}

input UserCreateOneWithoutIdentifierInput {
  create: UserCreateWithoutIdentifierInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutIdentifierInput {
  uuid: String
  isVerified: Boolean
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  uuid_ASC
  uuid_DESC
  isVerified_ASC
  isVerified_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  uuid: String
  isVerified: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  uuid: String
  isVerified: Boolean
  identifier: IdentifierUpdateOneWithoutUserInput
}

input UserUpdateOneWithoutIdentifierInput {
  create: UserCreateWithoutIdentifierInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutIdentifierDataInput
  upsert: UserUpsertWithoutIdentifierInput
}

input UserUpdateWithoutIdentifierDataInput {
  uuid: String
  isVerified: Boolean
}

input UserUpsertWithoutIdentifierInput {
  update: UserUpdateWithoutIdentifierDataInput!
  create: UserCreateWithoutIdentifierInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  uuid: String
  """
  All values that are not equal to given value.
  """
  uuid_not: String
  """
  All values that are contained in given list.
  """
  uuid_in: [String!]
  """
  All values that are not contained in given list.
  """
  uuid_not_in: [String!]
  """
  All values less than the given value.
  """
  uuid_lt: String
  """
  All values less than or equal the given value.
  """
  uuid_lte: String
  """
  All values greater than the given value.
  """
  uuid_gt: String
  """
  All values greater than or equal the given value.
  """
  uuid_gte: String
  """
  All values containing the given string.
  """
  uuid_contains: String
  """
  All values not containing the given string.
  """
  uuid_not_contains: String
  """
  All values starting with the given string.
  """
  uuid_starts_with: String
  """
  All values not starting with the given string.
  """
  uuid_not_starts_with: String
  """
  All values ending with the given string.
  """
  uuid_ends_with: String
  """
  All values not ending with the given string.
  """
  uuid_not_ends_with: String
  isVerified: Boolean
  """
  All values that are not equal to given value.
  """
  isVerified_not: Boolean
  identifier: IdentifierWhereInput
}

input UserWhereUniqueInput {
  id: ID
  uuid: String
}

"""
A connection to a list of items.
"""
type VerificationCodeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VerificationCodeEdge]!
  aggregate: AggregateVerificationCode!
}

input VerificationCodeCreateInput {
  code: String!
  validUntil: DateTime!
  identifier: IdentifierCreateOneWithoutVerificationCodesInput
}

input VerificationCodeCreateManyWithoutIdentifierInput {
  create: [VerificationCodeCreateWithoutIdentifierInput!]
  connect: [VerificationCodeWhereUniqueInput!]
}

input VerificationCodeCreateWithoutIdentifierInput {
  code: String!
  validUntil: DateTime!
}

"""
An edge in a connection.
"""
type VerificationCodeEdge {
  """
  The item at the end of the edge.
  """
  node: VerificationCode!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VerificationCodeOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  validUntil_ASC
  validUntil_DESC
}

type VerificationCodePreviousValues {
  code: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  validUntil: DateTime!
}

type VerificationCodeSubscriptionPayload {
  mutation: MutationType!
  node: VerificationCode
  updatedFields: [String!]
  previousValues: VerificationCodePreviousValues
}

input VerificationCodeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VerificationCodeSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VerificationCodeSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VerificationCodeWhereInput
}

input VerificationCodeUpdateInput {
  code: String
  validUntil: DateTime
  identifier: IdentifierUpdateOneWithoutVerificationCodesInput
}

input VerificationCodeUpdateManyWithoutIdentifierInput {
  create: [VerificationCodeCreateWithoutIdentifierInput!]
  connect: [VerificationCodeWhereUniqueInput!]
  disconnect: [VerificationCodeWhereUniqueInput!]
  delete: [VerificationCodeWhereUniqueInput!]
  update: [VerificationCodeUpdateWithWhereUniqueWithoutIdentifierInput!]
  upsert: [VerificationCodeUpsertWithWhereUniqueWithoutIdentifierInput!]
}

input VerificationCodeUpdateWithoutIdentifierDataInput {
  code: String
  validUntil: DateTime
}

input VerificationCodeUpdateWithWhereUniqueWithoutIdentifierInput {
  where: VerificationCodeWhereUniqueInput!
  data: VerificationCodeUpdateWithoutIdentifierDataInput!
}

input VerificationCodeUpsertWithWhereUniqueWithoutIdentifierInput {
  where: VerificationCodeWhereUniqueInput!
  update: VerificationCodeUpdateWithoutIdentifierDataInput!
  create: VerificationCodeCreateWithoutIdentifierInput!
}

input VerificationCodeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VerificationCodeWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VerificationCodeWhereInput!]
  code: String
  """
  All values that are not equal to given value.
  """
  code_not: String
  """
  All values that are contained in given list.
  """
  code_in: [String!]
  """
  All values that are not contained in given list.
  """
  code_not_in: [String!]
  """
  All values less than the given value.
  """
  code_lt: String
  """
  All values less than or equal the given value.
  """
  code_lte: String
  """
  All values greater than the given value.
  """
  code_gt: String
  """
  All values greater than or equal the given value.
  """
  code_gte: String
  """
  All values containing the given string.
  """
  code_contains: String
  """
  All values not containing the given string.
  """
  code_not_contains: String
  """
  All values starting with the given string.
  """
  code_starts_with: String
  """
  All values not starting with the given string.
  """
  code_not_starts_with: String
  """
  All values ending with the given string.
  """
  code_ends_with: String
  """
  All values not ending with the given string.
  """
  code_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  validUntil: DateTime
  """
  All values that are not equal to given value.
  """
  validUntil_not: DateTime
  """
  All values that are contained in given list.
  """
  validUntil_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  validUntil_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  validUntil_lt: DateTime
  """
  All values less than or equal the given value.
  """
  validUntil_lte: DateTime
  """
  All values greater than the given value.
  """
  validUntil_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  validUntil_gte: DateTime
  identifier: IdentifierWhereInput
}

input VerificationCodeWhereUniqueInput {
  code: String
  id: ID
}
