# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Application implements Node {
    id: ID!
    appId: String!
    name: String!
    description: String
    owners(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User!]
    members(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User!]
    users(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User!]
    credentials(
        where: ApplicationCredentialsWhereInput
    ): ApplicationCredentials!
    verificationCodes(
        where: VerificationCodeWhereInput
        orderBy: VerificationCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [VerificationCode!]
}

type CountryCode implements Node {
    id: ID!
    name: String
    countryCode: String!
    dialingCode: String!
    active: Boolean
    phoneNumbers(
        where: PhoneNumberWhereInput
        orderBy: PhoneNumberOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [PhoneNumber!]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Identifier implements Node {
    id: ID!
    hash: String!
    phoneNumber(where: PhoneNumberWhereInput): PhoneNumber
    user(where: UserWhereInput): User
    verificationCodes(
        where: VerificationCodeWhereInput
        orderBy: VerificationCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [VerificationCode!]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type PhoneNumber implements Node {
    countryCode(where: CountryCodeWhereInput): CountryCode!
    createdAt: DateTime!
    id: ID!
    identifier(where: IdentifierWhereInput): Identifier
    phoneNumber: String!
    updatedAt: DateTime!
}

type User implements Node {
    createdAt: DateTime!
    id: ID!
    identifier(where: IdentifierWhereInput): Identifier
    updatedAt: DateTime!
    uuid: String
    isVerified: Boolean
    ownedApplications(
        where: ApplicationWhereInput
        orderBy: ApplicationOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Application!]
    memberOf(
        where: ApplicationWhereInput
        orderBy: ApplicationOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Application!]
    userOf(
        where: ApplicationWhereInput
        orderBy: ApplicationOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Application!]
}

type VerificationCode implements Node {
    id: ID!
    code: String!
    createdAt: DateTime!
    application(where: ApplicationWhereInput): Application!
    identifier(where: IdentifierWhereInput): Identifier
    updatedAt: DateTime!
    validUntil: DateTime!
}

#
# Other Types
#

type AggregateApplication {
    count: Int!
}

type AggregateApplicationCredentials {
    count: Int!
}

type AggregateCountryCode {
    count: Int!
}

type AggregateIdentifier {
    count: Int!
}

type AggregatePhoneNumber {
    count: Int!
}

type AggregateUser {
    count: Int!
}

type AggregateVerificationCode {
    count: Int!
}

type ApplicationConnection {
    pageInfo: PageInfo!
    edges: [ApplicationEdge]!
    aggregate: AggregateApplication!
}

input ApplicationCreateInput {
    appId: String!
    name: String!
    description: String
    owners: UserCreateManyWithoutOwnedApplicationsInput
    members: UserCreateManyWithoutMemberOfInput
    users: UserCreateManyWithoutUserOfInput
    credentials: ApplicationCredentialsCreateOneInput!
    verificationCodes: VerificationCodeCreateManyWithoutApplicationInput
}

input ApplicationCreateManyWithoutMembersInput {
    create: [ApplicationCreateWithoutMembersInput!]
    connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutOwnersInput {
    create: [ApplicationCreateWithoutOwnersInput!]
    connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutUsersInput {
    create: [ApplicationCreateWithoutUsersInput!]
    connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateOneWithoutVerificationCodesInput {
    create: ApplicationCreateWithoutVerificationCodesInput
    connect: ApplicationWhereUniqueInput
}

input ApplicationCreateWithoutMembersInput {
    appId: String!
    name: String!
    description: String
    owners: UserCreateManyWithoutOwnedApplicationsInput
    users: UserCreateManyWithoutUserOfInput
    credentials: ApplicationCredentialsCreateOneInput!
    verificationCodes: VerificationCodeCreateManyWithoutApplicationInput
}

input ApplicationCreateWithoutOwnersInput {
    appId: String!
    name: String!
    description: String
    members: UserCreateManyWithoutMemberOfInput
    users: UserCreateManyWithoutUserOfInput
    credentials: ApplicationCredentialsCreateOneInput!
    verificationCodes: VerificationCodeCreateManyWithoutApplicationInput
}

input ApplicationCreateWithoutUsersInput {
    appId: String!
    name: String!
    description: String
    owners: UserCreateManyWithoutOwnedApplicationsInput
    members: UserCreateManyWithoutMemberOfInput
    credentials: ApplicationCredentialsCreateOneInput!
    verificationCodes: VerificationCodeCreateManyWithoutApplicationInput
}

input ApplicationCreateWithoutVerificationCodesInput {
    appId: String!
    name: String!
    description: String
    owners: UserCreateManyWithoutOwnedApplicationsInput
    members: UserCreateManyWithoutMemberOfInput
    users: UserCreateManyWithoutUserOfInput
    credentials: ApplicationCredentialsCreateOneInput!
}

type ApplicationCredentials {
    secret: String!
    active: Boolean
}

type ApplicationCredentialsConnection {
    pageInfo: PageInfo!
    edges: [ApplicationCredentialsEdge]!
    aggregate: AggregateApplicationCredentials!
}

input ApplicationCredentialsCreateInput {
    secret: String!
    active: Boolean
}

input ApplicationCredentialsCreateOneInput {
    create: ApplicationCredentialsCreateInput
}

type ApplicationCredentialsEdge {
    node: ApplicationCredentials!
    cursor: String!
}

enum ApplicationCredentialsOrderByInput {
    secret_ASC
    secret_DESC
    active_ASC
    active_DESC
    id_ASC
    id_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
}

type ApplicationCredentialsPreviousValues {
    secret: String!
    active: Boolean
}

type ApplicationCredentialsSubscriptionPayload {
    mutation: MutationType!
    node: ApplicationCredentials
    updatedFields: [String!]
    previousValues: ApplicationCredentialsPreviousValues
}

input ApplicationCredentialsSubscriptionWhereInput {
    AND: [ApplicationCredentialsSubscriptionWhereInput!]
    OR: [ApplicationCredentialsSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: ApplicationCredentialsWhereInput
}

input ApplicationCredentialsUpdateDataInput {
    secret: String
    active: Boolean
}

input ApplicationCredentialsUpdateInput {
    secret: String
    active: Boolean
}

input ApplicationCredentialsUpdateOneInput {
    create: ApplicationCredentialsCreateInput
    delete: Boolean
    update: ApplicationCredentialsUpdateDataInput
    upsert: ApplicationCredentialsUpsertNestedInput
}

input ApplicationCredentialsUpsertNestedInput {
    update: ApplicationCredentialsUpdateDataInput!
    create: ApplicationCredentialsCreateInput!
}

input ApplicationCredentialsWhereInput {
    AND: [ApplicationCredentialsWhereInput!]
    OR: [ApplicationCredentialsWhereInput!]
    secret: String
    secret_not: String
    secret_in: [String!]
    secret_not_in: [String!]
    secret_lt: String
    secret_lte: String
    secret_gt: String
    secret_gte: String
    secret_contains: String
    secret_not_contains: String
    secret_starts_with: String
    secret_not_starts_with: String
    secret_ends_with: String
    secret_not_ends_with: String
    active: Boolean
    active_not: Boolean
}

type ApplicationEdge {
    node: Application!
    cursor: String!
}

enum ApplicationOrderByInput {
    id_ASC
    id_DESC
    appId_ASC
    appId_DESC
    name_ASC
    name_DESC
    description_ASC
    description_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
}

type ApplicationPreviousValues {
    id: ID!
    appId: String!
    name: String!
    description: String
}

type ApplicationSubscriptionPayload {
    mutation: MutationType!
    node: Application
    updatedFields: [String!]
    previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
    AND: [ApplicationSubscriptionWhereInput!]
    OR: [ApplicationSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: ApplicationWhereInput
}

input ApplicationUpdateInput {
    appId: String
    name: String
    description: String
    owners: UserUpdateManyWithoutOwnedApplicationsInput
    members: UserUpdateManyWithoutMemberOfInput
    users: UserUpdateManyWithoutUserOfInput
    credentials: ApplicationCredentialsUpdateOneInput
    verificationCodes: VerificationCodeUpdateManyWithoutApplicationInput
}

input ApplicationUpdateManyWithoutMembersInput {
    create: [ApplicationCreateWithoutMembersInput!]
    connect: [ApplicationWhereUniqueInput!]
    disconnect: [ApplicationWhereUniqueInput!]
    delete: [ApplicationWhereUniqueInput!]
    update: [ApplicationUpdateWithWhereUniqueWithoutMembersInput!]
    upsert: [ApplicationUpsertWithWhereUniqueWithoutMembersInput!]
}

input ApplicationUpdateManyWithoutOwnersInput {
    create: [ApplicationCreateWithoutOwnersInput!]
    connect: [ApplicationWhereUniqueInput!]
    disconnect: [ApplicationWhereUniqueInput!]
    delete: [ApplicationWhereUniqueInput!]
    update: [ApplicationUpdateWithWhereUniqueWithoutOwnersInput!]
    upsert: [ApplicationUpsertWithWhereUniqueWithoutOwnersInput!]
}

input ApplicationUpdateManyWithoutUsersInput {
    create: [ApplicationCreateWithoutUsersInput!]
    connect: [ApplicationWhereUniqueInput!]
    disconnect: [ApplicationWhereUniqueInput!]
    delete: [ApplicationWhereUniqueInput!]
    update: [ApplicationUpdateWithWhereUniqueWithoutUsersInput!]
    upsert: [ApplicationUpsertWithWhereUniqueWithoutUsersInput!]
}

input ApplicationUpdateOneWithoutVerificationCodesInput {
    create: ApplicationCreateWithoutVerificationCodesInput
    connect: ApplicationWhereUniqueInput
    delete: Boolean
    update: ApplicationUpdateWithoutVerificationCodesDataInput
    upsert: ApplicationUpsertWithoutVerificationCodesInput
}

input ApplicationUpdateWithoutMembersDataInput {
    appId: String
    name: String
    description: String
    owners: UserUpdateManyWithoutOwnedApplicationsInput
    users: UserUpdateManyWithoutUserOfInput
    credentials: ApplicationCredentialsUpdateOneInput
    verificationCodes: VerificationCodeUpdateManyWithoutApplicationInput
}

input ApplicationUpdateWithoutOwnersDataInput {
    appId: String
    name: String
    description: String
    members: UserUpdateManyWithoutMemberOfInput
    users: UserUpdateManyWithoutUserOfInput
    credentials: ApplicationCredentialsUpdateOneInput
    verificationCodes: VerificationCodeUpdateManyWithoutApplicationInput
}

input ApplicationUpdateWithoutUsersDataInput {
    appId: String
    name: String
    description: String
    owners: UserUpdateManyWithoutOwnedApplicationsInput
    members: UserUpdateManyWithoutMemberOfInput
    credentials: ApplicationCredentialsUpdateOneInput
    verificationCodes: VerificationCodeUpdateManyWithoutApplicationInput
}

input ApplicationUpdateWithoutVerificationCodesDataInput {
    appId: String
    name: String
    description: String
    owners: UserUpdateManyWithoutOwnedApplicationsInput
    members: UserUpdateManyWithoutMemberOfInput
    users: UserUpdateManyWithoutUserOfInput
    credentials: ApplicationCredentialsUpdateOneInput
}

input ApplicationUpdateWithWhereUniqueWithoutMembersInput {
    where: ApplicationWhereUniqueInput!
    data: ApplicationUpdateWithoutMembersDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutOwnersInput {
    where: ApplicationWhereUniqueInput!
    data: ApplicationUpdateWithoutOwnersDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutUsersInput {
    where: ApplicationWhereUniqueInput!
    data: ApplicationUpdateWithoutUsersDataInput!
}

input ApplicationUpsertWithoutVerificationCodesInput {
    update: ApplicationUpdateWithoutVerificationCodesDataInput!
    create: ApplicationCreateWithoutVerificationCodesInput!
}

input ApplicationUpsertWithWhereUniqueWithoutMembersInput {
    where: ApplicationWhereUniqueInput!
    update: ApplicationUpdateWithoutMembersDataInput!
    create: ApplicationCreateWithoutMembersInput!
}

input ApplicationUpsertWithWhereUniqueWithoutOwnersInput {
    where: ApplicationWhereUniqueInput!
    update: ApplicationUpdateWithoutOwnersDataInput!
    create: ApplicationCreateWithoutOwnersInput!
}

input ApplicationUpsertWithWhereUniqueWithoutUsersInput {
    where: ApplicationWhereUniqueInput!
    update: ApplicationUpdateWithoutUsersDataInput!
    create: ApplicationCreateWithoutUsersInput!
}

input ApplicationWhereInput {
    AND: [ApplicationWhereInput!]
    OR: [ApplicationWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    appId: String
    appId_not: String
    appId_in: [String!]
    appId_not_in: [String!]
    appId_lt: String
    appId_lte: String
    appId_gt: String
    appId_gte: String
    appId_contains: String
    appId_not_contains: String
    appId_starts_with: String
    appId_not_starts_with: String
    appId_ends_with: String
    appId_not_ends_with: String
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    description: String
    description_not: String
    description_in: [String!]
    description_not_in: [String!]
    description_lt: String
    description_lte: String
    description_gt: String
    description_gte: String
    description_contains: String
    description_not_contains: String
    description_starts_with: String
    description_not_starts_with: String
    description_ends_with: String
    description_not_ends_with: String
    owners_every: UserWhereInput
    owners_some: UserWhereInput
    owners_none: UserWhereInput
    members_every: UserWhereInput
    members_some: UserWhereInput
    members_none: UserWhereInput
    users_every: UserWhereInput
    users_some: UserWhereInput
    users_none: UserWhereInput
    credentials: ApplicationCredentialsWhereInput
    verificationCodes_every: VerificationCodeWhereInput
    verificationCodes_some: VerificationCodeWhereInput
    verificationCodes_none: VerificationCodeWhereInput
}

input ApplicationWhereUniqueInput {
    id: ID
    name: String
}

type BatchPayload {
    count: Long!
}

type CountryCodeConnection {
    pageInfo: PageInfo!
    edges: [CountryCodeEdge]!
    aggregate: AggregateCountryCode!
}

input CountryCodeCreateInput {
    name: String
    countryCode: String!
    dialingCode: String!
    active: Boolean
    phoneNumbers: PhoneNumberCreateManyWithoutCountryCodeInput
}

input CountryCodeCreateOneWithoutPhoneNumbersInput {
    create: CountryCodeCreateWithoutPhoneNumbersInput
    connect: CountryCodeWhereUniqueInput
}

input CountryCodeCreateWithoutPhoneNumbersInput {
    name: String
    countryCode: String!
    dialingCode: String!
    active: Boolean
}

type CountryCodeEdge {
    node: CountryCode!
    cursor: String!
}

enum CountryCodeOrderByInput {
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    countryCode_ASC
    countryCode_DESC
    dialingCode_ASC
    dialingCode_DESC
    active_ASC
    active_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type CountryCodePreviousValues {
    id: ID!
    name: String
    countryCode: String!
    dialingCode: String!
    active: Boolean
    createdAt: DateTime!
    updatedAt: DateTime!
}

type CountryCodeSubscriptionPayload {
    mutation: MutationType!
    node: CountryCode
    updatedFields: [String!]
    previousValues: CountryCodePreviousValues
}

input CountryCodeSubscriptionWhereInput {
    AND: [CountryCodeSubscriptionWhereInput!]
    OR: [CountryCodeSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: CountryCodeWhereInput
}

input CountryCodeUpdateInput {
    name: String
    countryCode: String
    dialingCode: String
    active: Boolean
    phoneNumbers: PhoneNumberUpdateManyWithoutCountryCodeInput
}

input CountryCodeUpdateOneWithoutPhoneNumbersInput {
    create: CountryCodeCreateWithoutPhoneNumbersInput
    connect: CountryCodeWhereUniqueInput
    delete: Boolean
    update: CountryCodeUpdateWithoutPhoneNumbersDataInput
    upsert: CountryCodeUpsertWithoutPhoneNumbersInput
}

input CountryCodeUpdateWithoutPhoneNumbersDataInput {
    name: String
    countryCode: String
    dialingCode: String
    active: Boolean
}

input CountryCodeUpsertWithoutPhoneNumbersInput {
    update: CountryCodeUpdateWithoutPhoneNumbersDataInput!
    create: CountryCodeCreateWithoutPhoneNumbersInput!
}

input CountryCodeWhereInput {
    AND: [CountryCodeWhereInput!]
    OR: [CountryCodeWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    countryCode: String
    countryCode_not: String
    countryCode_in: [String!]
    countryCode_not_in: [String!]
    countryCode_lt: String
    countryCode_lte: String
    countryCode_gt: String
    countryCode_gte: String
    countryCode_contains: String
    countryCode_not_contains: String
    countryCode_starts_with: String
    countryCode_not_starts_with: String
    countryCode_ends_with: String
    countryCode_not_ends_with: String
    dialingCode: String
    dialingCode_not: String
    dialingCode_in: [String!]
    dialingCode_not_in: [String!]
    dialingCode_lt: String
    dialingCode_lte: String
    dialingCode_gt: String
    dialingCode_gte: String
    dialingCode_contains: String
    dialingCode_not_contains: String
    dialingCode_starts_with: String
    dialingCode_not_starts_with: String
    dialingCode_ends_with: String
    dialingCode_not_ends_with: String
    active: Boolean
    active_not: Boolean
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    phoneNumbers_every: PhoneNumberWhereInput
    phoneNumbers_some: PhoneNumberWhereInput
    phoneNumbers_none: PhoneNumberWhereInput
}

input CountryCodeWhereUniqueInput {
    id: ID
    dialingCode: String
}

scalar DateTime

type IdentifierConnection {
    pageInfo: PageInfo!
    edges: [IdentifierEdge]!
    aggregate: AggregateIdentifier!
}

input IdentifierCreateInput {
    hash: String!
    phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
    user: UserCreateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateOneWithoutPhoneNumberInput {
    create: IdentifierCreateWithoutPhoneNumberInput
    connect: IdentifierWhereUniqueInput
}

input IdentifierCreateOneWithoutUserInput {
    create: IdentifierCreateWithoutUserInput
    connect: IdentifierWhereUniqueInput
}

input IdentifierCreateOneWithoutVerificationCodesInput {
    create: IdentifierCreateWithoutVerificationCodesInput
    connect: IdentifierWhereUniqueInput
}

input IdentifierCreateWithoutPhoneNumberInput {
    hash: String!
    user: UserCreateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateWithoutUserInput {
    hash: String!
    phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeCreateManyWithoutIdentifierInput
}

input IdentifierCreateWithoutVerificationCodesInput {
    hash: String!
    phoneNumber: PhoneNumberCreateOneWithoutIdentifierInput
    user: UserCreateOneWithoutIdentifierInput
}

type IdentifierEdge {
    node: Identifier!
    cursor: String!
}

enum IdentifierOrderByInput {
    id_ASC
    id_DESC
    hash_ASC
    hash_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type IdentifierPreviousValues {
    id: ID!
    hash: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type IdentifierSubscriptionPayload {
    mutation: MutationType!
    node: Identifier
    updatedFields: [String!]
    previousValues: IdentifierPreviousValues
}

input IdentifierSubscriptionWhereInput {
    AND: [IdentifierSubscriptionWhereInput!]
    OR: [IdentifierSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: IdentifierWhereInput
}

input IdentifierUpdateInput {
    hash: String
    phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
    user: UserUpdateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateOneWithoutPhoneNumberInput {
    create: IdentifierCreateWithoutPhoneNumberInput
    connect: IdentifierWhereUniqueInput
    disconnect: Boolean
    delete: Boolean
    update: IdentifierUpdateWithoutPhoneNumberDataInput
    upsert: IdentifierUpsertWithoutPhoneNumberInput
}

input IdentifierUpdateOneWithoutUserInput {
    create: IdentifierCreateWithoutUserInput
    connect: IdentifierWhereUniqueInput
    disconnect: Boolean
    delete: Boolean
    update: IdentifierUpdateWithoutUserDataInput
    upsert: IdentifierUpsertWithoutUserInput
}

input IdentifierUpdateOneWithoutVerificationCodesInput {
    create: IdentifierCreateWithoutVerificationCodesInput
    connect: IdentifierWhereUniqueInput
    disconnect: Boolean
    delete: Boolean
    update: IdentifierUpdateWithoutVerificationCodesDataInput
    upsert: IdentifierUpsertWithoutVerificationCodesInput
}

input IdentifierUpdateWithoutPhoneNumberDataInput {
    hash: String
    user: UserUpdateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateWithoutUserDataInput {
    hash: String
    phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
    verificationCodes: VerificationCodeUpdateManyWithoutIdentifierInput
}

input IdentifierUpdateWithoutVerificationCodesDataInput {
    hash: String
    phoneNumber: PhoneNumberUpdateOneWithoutIdentifierInput
    user: UserUpdateOneWithoutIdentifierInput
}

input IdentifierUpsertWithoutPhoneNumberInput {
    update: IdentifierUpdateWithoutPhoneNumberDataInput!
    create: IdentifierCreateWithoutPhoneNumberInput!
}

input IdentifierUpsertWithoutUserInput {
    update: IdentifierUpdateWithoutUserDataInput!
    create: IdentifierCreateWithoutUserInput!
}

input IdentifierUpsertWithoutVerificationCodesInput {
    update: IdentifierUpdateWithoutVerificationCodesDataInput!
    create: IdentifierCreateWithoutVerificationCodesInput!
}

input IdentifierWhereInput {
    AND: [IdentifierWhereInput!]
    OR: [IdentifierWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    hash: String
    hash_not: String
    hash_in: [String!]
    hash_not_in: [String!]
    hash_lt: String
    hash_lte: String
    hash_gt: String
    hash_gte: String
    hash_contains: String
    hash_not_contains: String
    hash_starts_with: String
    hash_not_starts_with: String
    hash_ends_with: String
    hash_not_ends_with: String
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    phoneNumber: PhoneNumberWhereInput
    user: UserWhereInput
    verificationCodes_every: VerificationCodeWhereInput
    verificationCodes_some: VerificationCodeWhereInput
    verificationCodes_none: VerificationCodeWhereInput
}

input IdentifierWhereUniqueInput {
    id: ID
    hash: String
}

scalar Long

type Mutation {
    createCountryCode(data: CountryCodeCreateInput!): CountryCode!
    createIdentifier(data: IdentifierCreateInput!): Identifier!
    createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber!
    createUser(data: UserCreateInput!): User!
    createVerificationCode(
        data: VerificationCodeCreateInput!
    ): VerificationCode!
    createApplication(data: ApplicationCreateInput!): Application!
    createApplicationCredentials(
        data: ApplicationCredentialsCreateInput!
    ): ApplicationCredentials!
    updateCountryCode(
        data: CountryCodeUpdateInput!
        where: CountryCodeWhereUniqueInput!
    ): CountryCode
    updateIdentifier(
        data: IdentifierUpdateInput!
        where: IdentifierWhereUniqueInput!
    ): Identifier
    updatePhoneNumber(
        data: PhoneNumberUpdateInput!
        where: PhoneNumberWhereUniqueInput!
    ): PhoneNumber
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateVerificationCode(
        data: VerificationCodeUpdateInput!
        where: VerificationCodeWhereUniqueInput!
    ): VerificationCode
    updateApplication(
        data: ApplicationUpdateInput!
        where: ApplicationWhereUniqueInput!
    ): Application
    deleteCountryCode(where: CountryCodeWhereUniqueInput!): CountryCode
    deleteIdentifier(where: IdentifierWhereUniqueInput!): Identifier
    deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
    deleteUser(where: UserWhereUniqueInput!): User
    deleteVerificationCode(
        where: VerificationCodeWhereUniqueInput!
    ): VerificationCode
    deleteApplication(where: ApplicationWhereUniqueInput!): Application
    upsertCountryCode(
        where: CountryCodeWhereUniqueInput!
        create: CountryCodeCreateInput!
        update: CountryCodeUpdateInput!
    ): CountryCode!
    upsertIdentifier(
        where: IdentifierWhereUniqueInput!
        create: IdentifierCreateInput!
        update: IdentifierUpdateInput!
    ): Identifier!
    upsertPhoneNumber(
        where: PhoneNumberWhereUniqueInput!
        create: PhoneNumberCreateInput!
        update: PhoneNumberUpdateInput!
    ): PhoneNumber!
    upsertUser(
        where: UserWhereUniqueInput!
        create: UserCreateInput!
        update: UserUpdateInput!
    ): User!
    upsertVerificationCode(
        where: VerificationCodeWhereUniqueInput!
        create: VerificationCodeCreateInput!
        update: VerificationCodeUpdateInput!
    ): VerificationCode!
    upsertApplication(
        where: ApplicationWhereUniqueInput!
        create: ApplicationCreateInput!
        update: ApplicationUpdateInput!
    ): Application!
    updateManyCountryCodes(
        data: CountryCodeUpdateInput!
        where: CountryCodeWhereInput
    ): BatchPayload!
    updateManyIdentifiers(
        data: IdentifierUpdateInput!
        where: IdentifierWhereInput
    ): BatchPayload!
    updateManyPhoneNumbers(
        data: PhoneNumberUpdateInput!
        where: PhoneNumberWhereInput
    ): BatchPayload!
    updateManyUsers(
        data: UserUpdateInput!
        where: UserWhereInput
    ): BatchPayload!
    updateManyVerificationCodes(
        data: VerificationCodeUpdateInput!
        where: VerificationCodeWhereInput
    ): BatchPayload!
    updateManyApplications(
        data: ApplicationUpdateInput!
        where: ApplicationWhereInput
    ): BatchPayload!
    updateManyApplicationCredentialses(
        data: ApplicationCredentialsUpdateInput!
        where: ApplicationCredentialsWhereInput
    ): BatchPayload!
    deleteManyCountryCodes(where: CountryCodeWhereInput): BatchPayload!
    deleteManyIdentifiers(where: IdentifierWhereInput): BatchPayload!
    deleteManyPhoneNumbers(where: PhoneNumberWhereInput): BatchPayload!
    deleteManyUsers(where: UserWhereInput): BatchPayload!
    deleteManyVerificationCodes(
        where: VerificationCodeWhereInput
    ): BatchPayload!
    deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
    deleteManyApplicationCredentialses(
        where: ApplicationCredentialsWhereInput
    ): BatchPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type PhoneNumberConnection {
    pageInfo: PageInfo!
    edges: [PhoneNumberEdge]!
    aggregate: AggregatePhoneNumber!
}

input PhoneNumberCreateInput {
    phoneNumber: String!
    countryCode: CountryCodeCreateOneWithoutPhoneNumbersInput!
    identifier: IdentifierCreateOneWithoutPhoneNumberInput
}

input PhoneNumberCreateManyWithoutCountryCodeInput {
    create: [PhoneNumberCreateWithoutCountryCodeInput!]
    connect: [PhoneNumberWhereUniqueInput!]
}

input PhoneNumberCreateOneWithoutIdentifierInput {
    create: PhoneNumberCreateWithoutIdentifierInput
    connect: PhoneNumberWhereUniqueInput
}

input PhoneNumberCreateWithoutCountryCodeInput {
    phoneNumber: String!
    identifier: IdentifierCreateOneWithoutPhoneNumberInput
}

input PhoneNumberCreateWithoutIdentifierInput {
    phoneNumber: String!
    countryCode: CountryCodeCreateOneWithoutPhoneNumbersInput!
}

type PhoneNumberEdge {
    node: PhoneNumber!
    cursor: String!
}

enum PhoneNumberOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    phoneNumber_ASC
    phoneNumber_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type PhoneNumberPreviousValues {
    createdAt: DateTime!
    id: ID!
    phoneNumber: String!
    updatedAt: DateTime!
}

type PhoneNumberSubscriptionPayload {
    mutation: MutationType!
    node: PhoneNumber
    updatedFields: [String!]
    previousValues: PhoneNumberPreviousValues
}

input PhoneNumberSubscriptionWhereInput {
    AND: [PhoneNumberSubscriptionWhereInput!]
    OR: [PhoneNumberSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: PhoneNumberWhereInput
}

input PhoneNumberUpdateInput {
    phoneNumber: String
    countryCode: CountryCodeUpdateOneWithoutPhoneNumbersInput
    identifier: IdentifierUpdateOneWithoutPhoneNumberInput
}

input PhoneNumberUpdateManyWithoutCountryCodeInput {
    create: [PhoneNumberCreateWithoutCountryCodeInput!]
    connect: [PhoneNumberWhereUniqueInput!]
    disconnect: [PhoneNumberWhereUniqueInput!]
    delete: [PhoneNumberWhereUniqueInput!]
    update: [PhoneNumberUpdateWithWhereUniqueWithoutCountryCodeInput!]
    upsert: [PhoneNumberUpsertWithWhereUniqueWithoutCountryCodeInput!]
}

input PhoneNumberUpdateOneWithoutIdentifierInput {
    create: PhoneNumberCreateWithoutIdentifierInput
    connect: PhoneNumberWhereUniqueInput
    disconnect: Boolean
    delete: Boolean
    update: PhoneNumberUpdateWithoutIdentifierDataInput
    upsert: PhoneNumberUpsertWithoutIdentifierInput
}

input PhoneNumberUpdateWithoutCountryCodeDataInput {
    phoneNumber: String
    identifier: IdentifierUpdateOneWithoutPhoneNumberInput
}

input PhoneNumberUpdateWithoutIdentifierDataInput {
    phoneNumber: String
    countryCode: CountryCodeUpdateOneWithoutPhoneNumbersInput
}

input PhoneNumberUpdateWithWhereUniqueWithoutCountryCodeInput {
    where: PhoneNumberWhereUniqueInput!
    data: PhoneNumberUpdateWithoutCountryCodeDataInput!
}

input PhoneNumberUpsertWithoutIdentifierInput {
    update: PhoneNumberUpdateWithoutIdentifierDataInput!
    create: PhoneNumberCreateWithoutIdentifierInput!
}

input PhoneNumberUpsertWithWhereUniqueWithoutCountryCodeInput {
    where: PhoneNumberWhereUniqueInput!
    update: PhoneNumberUpdateWithoutCountryCodeDataInput!
    create: PhoneNumberCreateWithoutCountryCodeInput!
}

input PhoneNumberWhereInput {
    AND: [PhoneNumberWhereInput!]
    OR: [PhoneNumberWhereInput!]
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    phoneNumber: String
    phoneNumber_not: String
    phoneNumber_in: [String!]
    phoneNumber_not_in: [String!]
    phoneNumber_lt: String
    phoneNumber_lte: String
    phoneNumber_gt: String
    phoneNumber_gte: String
    phoneNumber_contains: String
    phoneNumber_not_contains: String
    phoneNumber_starts_with: String
    phoneNumber_not_starts_with: String
    phoneNumber_ends_with: String
    phoneNumber_not_ends_with: String
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    countryCode: CountryCodeWhereInput
    identifier: IdentifierWhereInput
}

input PhoneNumberWhereUniqueInput {
    id: ID
    phoneNumber: String
}

type Query {
    countryCodes(
        where: CountryCodeWhereInput
        orderBy: CountryCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [CountryCode]!
    identifiers(
        where: IdentifierWhereInput
        orderBy: IdentifierOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Identifier]!
    phoneNumbers(
        where: PhoneNumberWhereInput
        orderBy: PhoneNumberOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [PhoneNumber]!
    users(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User]!
    verificationCodes(
        where: VerificationCodeWhereInput
        orderBy: VerificationCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [VerificationCode]!
    applications(
        where: ApplicationWhereInput
        orderBy: ApplicationOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Application]!
    applicationCredentialses(
        where: ApplicationCredentialsWhereInput
        orderBy: ApplicationCredentialsOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [ApplicationCredentials]!
    countryCode(where: CountryCodeWhereUniqueInput!): CountryCode
    identifier(where: IdentifierWhereUniqueInput!): Identifier
    phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
    user(where: UserWhereUniqueInput!): User
    verificationCode(where: VerificationCodeWhereUniqueInput!): VerificationCode
    application(where: ApplicationWhereUniqueInput!): Application
    countryCodesConnection(
        where: CountryCodeWhereInput
        orderBy: CountryCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): CountryCodeConnection!
    identifiersConnection(
        where: IdentifierWhereInput
        orderBy: IdentifierOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): IdentifierConnection!
    phoneNumbersConnection(
        where: PhoneNumberWhereInput
        orderBy: PhoneNumberOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): PhoneNumberConnection!
    usersConnection(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): UserConnection!
    verificationCodesConnection(
        where: VerificationCodeWhereInput
        orderBy: VerificationCodeOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): VerificationCodeConnection!
    applicationsConnection(
        where: ApplicationWhereInput
        orderBy: ApplicationOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): ApplicationConnection!
    applicationCredentialsesConnection(
        where: ApplicationCredentialsWhereInput
        orderBy: ApplicationCredentialsOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): ApplicationCredentialsConnection!
    node(id: ID!): Node
}

type Subscription {
    countryCode(
        where: CountryCodeSubscriptionWhereInput
    ): CountryCodeSubscriptionPayload
    identifier(
        where: IdentifierSubscriptionWhereInput
    ): IdentifierSubscriptionPayload
    phoneNumber(
        where: PhoneNumberSubscriptionWhereInput
    ): PhoneNumberSubscriptionPayload
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
    verificationCode(
        where: VerificationCodeSubscriptionWhereInput
    ): VerificationCodeSubscriptionPayload
    application(
        where: ApplicationSubscriptionWhereInput
    ): ApplicationSubscriptionPayload
    applicationCredentials(
        where: ApplicationCredentialsSubscriptionWhereInput
    ): ApplicationCredentialsSubscriptionPayload
}

type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
}

input UserCreateInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierCreateOneWithoutUserInput
    ownedApplications: ApplicationCreateManyWithoutOwnersInput
    memberOf: ApplicationCreateManyWithoutMembersInput
    userOf: ApplicationCreateManyWithoutUsersInput
}

input UserCreateManyWithoutMemberOfInput {
    create: [UserCreateWithoutMemberOfInput!]
    connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutOwnedApplicationsInput {
    create: [UserCreateWithoutOwnedApplicationsInput!]
    connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUserOfInput {
    create: [UserCreateWithoutUserOfInput!]
    connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutIdentifierInput {
    create: UserCreateWithoutIdentifierInput
    connect: UserWhereUniqueInput
}

input UserCreateWithoutIdentifierInput {
    uuid: String
    isVerified: Boolean
    ownedApplications: ApplicationCreateManyWithoutOwnersInput
    memberOf: ApplicationCreateManyWithoutMembersInput
    userOf: ApplicationCreateManyWithoutUsersInput
}

input UserCreateWithoutMemberOfInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierCreateOneWithoutUserInput
    ownedApplications: ApplicationCreateManyWithoutOwnersInput
    userOf: ApplicationCreateManyWithoutUsersInput
}

input UserCreateWithoutOwnedApplicationsInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierCreateOneWithoutUserInput
    memberOf: ApplicationCreateManyWithoutMembersInput
    userOf: ApplicationCreateManyWithoutUsersInput
}

input UserCreateWithoutUserOfInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierCreateOneWithoutUserInput
    ownedApplications: ApplicationCreateManyWithoutOwnersInput
    memberOf: ApplicationCreateManyWithoutMembersInput
}

type UserEdge {
    node: User!
    cursor: String!
}

enum UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    updatedAt_ASC
    updatedAt_DESC
    uuid_ASC
    uuid_DESC
    isVerified_ASC
    isVerified_DESC
}

type UserPreviousValues {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
    uuid: String
    isVerified: Boolean
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
    AND: [UserSubscriptionWhereInput!]
    OR: [UserSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: UserWhereInput
}

input UserUpdateInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierUpdateOneWithoutUserInput
    ownedApplications: ApplicationUpdateManyWithoutOwnersInput
    memberOf: ApplicationUpdateManyWithoutMembersInput
    userOf: ApplicationUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutMemberOfInput {
    create: [UserCreateWithoutMemberOfInput!]
    connect: [UserWhereUniqueInput!]
    disconnect: [UserWhereUniqueInput!]
    delete: [UserWhereUniqueInput!]
    update: [UserUpdateWithWhereUniqueWithoutMemberOfInput!]
    upsert: [UserUpsertWithWhereUniqueWithoutMemberOfInput!]
}

input UserUpdateManyWithoutOwnedApplicationsInput {
    create: [UserCreateWithoutOwnedApplicationsInput!]
    connect: [UserWhereUniqueInput!]
    disconnect: [UserWhereUniqueInput!]
    delete: [UserWhereUniqueInput!]
    update: [UserUpdateWithWhereUniqueWithoutOwnedApplicationsInput!]
    upsert: [UserUpsertWithWhereUniqueWithoutOwnedApplicationsInput!]
}

input UserUpdateManyWithoutUserOfInput {
    create: [UserCreateWithoutUserOfInput!]
    connect: [UserWhereUniqueInput!]
    disconnect: [UserWhereUniqueInput!]
    delete: [UserWhereUniqueInput!]
    update: [UserUpdateWithWhereUniqueWithoutUserOfInput!]
    upsert: [UserUpsertWithWhereUniqueWithoutUserOfInput!]
}

input UserUpdateOneWithoutIdentifierInput {
    create: UserCreateWithoutIdentifierInput
    connect: UserWhereUniqueInput
    disconnect: Boolean
    delete: Boolean
    update: UserUpdateWithoutIdentifierDataInput
    upsert: UserUpsertWithoutIdentifierInput
}

input UserUpdateWithoutIdentifierDataInput {
    uuid: String
    isVerified: Boolean
    ownedApplications: ApplicationUpdateManyWithoutOwnersInput
    memberOf: ApplicationUpdateManyWithoutMembersInput
    userOf: ApplicationUpdateManyWithoutUsersInput
}

input UserUpdateWithoutMemberOfDataInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierUpdateOneWithoutUserInput
    ownedApplications: ApplicationUpdateManyWithoutOwnersInput
    userOf: ApplicationUpdateManyWithoutUsersInput
}

input UserUpdateWithoutOwnedApplicationsDataInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierUpdateOneWithoutUserInput
    memberOf: ApplicationUpdateManyWithoutMembersInput
    userOf: ApplicationUpdateManyWithoutUsersInput
}

input UserUpdateWithoutUserOfDataInput {
    uuid: String
    isVerified: Boolean
    identifier: IdentifierUpdateOneWithoutUserInput
    ownedApplications: ApplicationUpdateManyWithoutOwnersInput
    memberOf: ApplicationUpdateManyWithoutMembersInput
}

input UserUpdateWithWhereUniqueWithoutMemberOfInput {
    where: UserWhereUniqueInput!
    data: UserUpdateWithoutMemberOfDataInput!
}

input UserUpdateWithWhereUniqueWithoutOwnedApplicationsInput {
    where: UserWhereUniqueInput!
    data: UserUpdateWithoutOwnedApplicationsDataInput!
}

input UserUpdateWithWhereUniqueWithoutUserOfInput {
    where: UserWhereUniqueInput!
    data: UserUpdateWithoutUserOfDataInput!
}

input UserUpsertWithoutIdentifierInput {
    update: UserUpdateWithoutIdentifierDataInput!
    create: UserCreateWithoutIdentifierInput!
}

input UserUpsertWithWhereUniqueWithoutMemberOfInput {
    where: UserWhereUniqueInput!
    update: UserUpdateWithoutMemberOfDataInput!
    create: UserCreateWithoutMemberOfInput!
}

input UserUpsertWithWhereUniqueWithoutOwnedApplicationsInput {
    where: UserWhereUniqueInput!
    update: UserUpdateWithoutOwnedApplicationsDataInput!
    create: UserCreateWithoutOwnedApplicationsInput!
}

input UserUpsertWithWhereUniqueWithoutUserOfInput {
    where: UserWhereUniqueInput!
    update: UserUpdateWithoutUserOfDataInput!
    create: UserCreateWithoutUserOfInput!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    OR: [UserWhereInput!]
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    uuid: String
    uuid_not: String
    uuid_in: [String!]
    uuid_not_in: [String!]
    uuid_lt: String
    uuid_lte: String
    uuid_gt: String
    uuid_gte: String
    uuid_contains: String
    uuid_not_contains: String
    uuid_starts_with: String
    uuid_not_starts_with: String
    uuid_ends_with: String
    uuid_not_ends_with: String
    isVerified: Boolean
    isVerified_not: Boolean
    identifier: IdentifierWhereInput
    ownedApplications_every: ApplicationWhereInput
    ownedApplications_some: ApplicationWhereInput
    ownedApplications_none: ApplicationWhereInput
    memberOf_every: ApplicationWhereInput
    memberOf_some: ApplicationWhereInput
    memberOf_none: ApplicationWhereInput
    userOf_every: ApplicationWhereInput
    userOf_some: ApplicationWhereInput
    userOf_none: ApplicationWhereInput
}

input UserWhereUniqueInput {
    id: ID
    uuid: String
}

type VerificationCodeConnection {
    pageInfo: PageInfo!
    edges: [VerificationCodeEdge]!
    aggregate: AggregateVerificationCode!
}

input VerificationCodeCreateInput {
    code: String!
    validUntil: DateTime!
    application: ApplicationCreateOneWithoutVerificationCodesInput!
    identifier: IdentifierCreateOneWithoutVerificationCodesInput
}

input VerificationCodeCreateManyWithoutApplicationInput {
    create: [VerificationCodeCreateWithoutApplicationInput!]
    connect: [VerificationCodeWhereUniqueInput!]
}

input VerificationCodeCreateManyWithoutIdentifierInput {
    create: [VerificationCodeCreateWithoutIdentifierInput!]
    connect: [VerificationCodeWhereUniqueInput!]
}

input VerificationCodeCreateWithoutApplicationInput {
    code: String!
    validUntil: DateTime!
    identifier: IdentifierCreateOneWithoutVerificationCodesInput
}

input VerificationCodeCreateWithoutIdentifierInput {
    code: String!
    validUntil: DateTime!
    application: ApplicationCreateOneWithoutVerificationCodesInput!
}

type VerificationCodeEdge {
    node: VerificationCode!
    cursor: String!
}

enum VerificationCodeOrderByInput {
    id_ASC
    id_DESC
    code_ASC
    code_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
    validUntil_ASC
    validUntil_DESC
}

type VerificationCodePreviousValues {
    id: ID!
    code: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    validUntil: DateTime!
}

type VerificationCodeSubscriptionPayload {
    mutation: MutationType!
    node: VerificationCode
    updatedFields: [String!]
    previousValues: VerificationCodePreviousValues
}

input VerificationCodeSubscriptionWhereInput {
    AND: [VerificationCodeSubscriptionWhereInput!]
    OR: [VerificationCodeSubscriptionWhereInput!]
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: VerificationCodeWhereInput
}

input VerificationCodeUpdateInput {
    code: String
    validUntil: DateTime
    application: ApplicationUpdateOneWithoutVerificationCodesInput
    identifier: IdentifierUpdateOneWithoutVerificationCodesInput
}

input VerificationCodeUpdateManyWithoutApplicationInput {
    create: [VerificationCodeCreateWithoutApplicationInput!]
    connect: [VerificationCodeWhereUniqueInput!]
    disconnect: [VerificationCodeWhereUniqueInput!]
    delete: [VerificationCodeWhereUniqueInput!]
    update: [VerificationCodeUpdateWithWhereUniqueWithoutApplicationInput!]
    upsert: [VerificationCodeUpsertWithWhereUniqueWithoutApplicationInput!]
}

input VerificationCodeUpdateManyWithoutIdentifierInput {
    create: [VerificationCodeCreateWithoutIdentifierInput!]
    connect: [VerificationCodeWhereUniqueInput!]
    disconnect: [VerificationCodeWhereUniqueInput!]
    delete: [VerificationCodeWhereUniqueInput!]
    update: [VerificationCodeUpdateWithWhereUniqueWithoutIdentifierInput!]
    upsert: [VerificationCodeUpsertWithWhereUniqueWithoutIdentifierInput!]
}

input VerificationCodeUpdateWithoutApplicationDataInput {
    code: String
    validUntil: DateTime
    identifier: IdentifierUpdateOneWithoutVerificationCodesInput
}

input VerificationCodeUpdateWithoutIdentifierDataInput {
    code: String
    validUntil: DateTime
    application: ApplicationUpdateOneWithoutVerificationCodesInput
}

input VerificationCodeUpdateWithWhereUniqueWithoutApplicationInput {
    where: VerificationCodeWhereUniqueInput!
    data: VerificationCodeUpdateWithoutApplicationDataInput!
}

input VerificationCodeUpdateWithWhereUniqueWithoutIdentifierInput {
    where: VerificationCodeWhereUniqueInput!
    data: VerificationCodeUpdateWithoutIdentifierDataInput!
}

input VerificationCodeUpsertWithWhereUniqueWithoutApplicationInput {
    where: VerificationCodeWhereUniqueInput!
    update: VerificationCodeUpdateWithoutApplicationDataInput!
    create: VerificationCodeCreateWithoutApplicationInput!
}

input VerificationCodeUpsertWithWhereUniqueWithoutIdentifierInput {
    where: VerificationCodeWhereUniqueInput!
    update: VerificationCodeUpdateWithoutIdentifierDataInput!
    create: VerificationCodeCreateWithoutIdentifierInput!
}

input VerificationCodeWhereInput {
    AND: [VerificationCodeWhereInput!]
    OR: [VerificationCodeWhereInput!]
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    code: String
    code_not: String
    code_in: [String!]
    code_not_in: [String!]
    code_lt: String
    code_lte: String
    code_gt: String
    code_gte: String
    code_contains: String
    code_not_contains: String
    code_starts_with: String
    code_not_starts_with: String
    code_ends_with: String
    code_not_ends_with: String
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    validUntil: DateTime
    validUntil_not: DateTime
    validUntil_in: [DateTime!]
    validUntil_not_in: [DateTime!]
    validUntil_lt: DateTime
    validUntil_lte: DateTime
    validUntil_gt: DateTime
    validUntil_gte: DateTime
    application: ApplicationWhereInput
    identifier: IdentifierWhereInput
}

input VerificationCodeWhereUniqueInput {
    id: ID
    code: String
}
